// Copyright 2021 VMware, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware/go-ipfix/pkg/entities (interfaces: Record)

// Package testing is a generated GoMock package.
package testing

import (
	gomock "github.com/golang/mock/gomock"
	entities "github.com/vmware/go-ipfix/pkg/entities"
	reflect "reflect"
)

// MockRecord is a mock of Record interface
type MockRecord struct {
	ctrl     *gomock.Controller
	recorder *MockRecordMockRecorder
}

// MockRecordMockRecorder is the mock recorder for MockRecord
type MockRecordMockRecorder struct {
	mock *MockRecord
}

// NewMockRecord creates a new mock instance
func NewMockRecord(ctrl *gomock.Controller) *MockRecord {
	mock := &MockRecord{ctrl: ctrl}
	mock.recorder = &MockRecordMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRecord) EXPECT() *MockRecordMockRecorder {
	return m.recorder
}

// AddInfoElement mocks base method
func (m *MockRecord) AddInfoElement(arg0 *entities.InfoElementWithValue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInfoElement", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddInfoElement indicates an expected call of AddInfoElement
func (mr *MockRecordMockRecorder) AddInfoElement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInfoElement", reflect.TypeOf((*MockRecord)(nil).AddInfoElement), arg0)
}

// GetBuffer mocks base method
func (m *MockRecord) GetBuffer() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuffer")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetBuffer indicates an expected call of GetBuffer
func (mr *MockRecordMockRecorder) GetBuffer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuffer", reflect.TypeOf((*MockRecord)(nil).GetBuffer))
}

// GetFieldCount mocks base method
func (m *MockRecord) GetFieldCount() uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFieldCount")
	ret0, _ := ret[0].(uint16)
	return ret0
}

// GetFieldCount indicates an expected call of GetFieldCount
func (mr *MockRecordMockRecorder) GetFieldCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldCount", reflect.TypeOf((*MockRecord)(nil).GetFieldCount))
}

// GetInfoElementWithValue mocks base method
func (m *MockRecord) GetInfoElementWithValue(arg0 string) (*entities.InfoElementWithValue, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfoElementWithValue", arg0)
	ret0, _ := ret[0].(*entities.InfoElementWithValue)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetInfoElementWithValue indicates an expected call of GetInfoElementWithValue
func (mr *MockRecordMockRecorder) GetInfoElementWithValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfoElementWithValue", reflect.TypeOf((*MockRecord)(nil).GetInfoElementWithValue), arg0)
}

// GetMinDataRecordLen mocks base method
func (m *MockRecord) GetMinDataRecordLen() uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinDataRecordLen")
	ret0, _ := ret[0].(uint16)
	return ret0
}

// GetMinDataRecordLen indicates an expected call of GetMinDataRecordLen
func (mr *MockRecordMockRecorder) GetMinDataRecordLen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinDataRecordLen", reflect.TypeOf((*MockRecord)(nil).GetMinDataRecordLen))
}

// GetOrderedElementList mocks base method
func (m *MockRecord) GetOrderedElementList() []*entities.InfoElementWithValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderedElementList")
	ret0, _ := ret[0].([]*entities.InfoElementWithValue)
	return ret0
}

// GetOrderedElementList indicates an expected call of GetOrderedElementList
func (mr *MockRecordMockRecorder) GetOrderedElementList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderedElementList", reflect.TypeOf((*MockRecord)(nil).GetOrderedElementList))
}

// GetTemplateID mocks base method
func (m *MockRecord) GetTemplateID() uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateID")
	ret0, _ := ret[0].(uint16)
	return ret0
}

// GetTemplateID indicates an expected call of GetTemplateID
func (mr *MockRecordMockRecorder) GetTemplateID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateID", reflect.TypeOf((*MockRecord)(nil).GetTemplateID))
}

// PrepareRecord mocks base method
func (m *MockRecord) PrepareRecord() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareRecord")
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareRecord indicates an expected call of PrepareRecord
func (mr *MockRecordMockRecorder) PrepareRecord() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareRecord", reflect.TypeOf((*MockRecord)(nil).PrepareRecord))
}
