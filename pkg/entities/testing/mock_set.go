// Copyright 2021 VMware, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware/go-ipfix/pkg/entities (interfaces: Set)

// Package testing is a generated GoMock package.
package testing

import (
	gomock "github.com/golang/mock/gomock"
	entities "github.com/vmware/go-ipfix/pkg/entities"
	reflect "reflect"
)

// MockSet is a mock of Set interface
type MockSet struct {
	ctrl     *gomock.Controller
	recorder *MockSetMockRecorder
}

// MockSetMockRecorder is the mock recorder for MockSet
type MockSetMockRecorder struct {
	mock *MockSet
}

// NewMockSet creates a new mock instance
func NewMockSet(ctrl *gomock.Controller) *MockSet {
	mock := &MockSet{ctrl: ctrl}
	mock.recorder = &MockSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSet) EXPECT() *MockSetMockRecorder {
	return m.recorder
}

// AddRecord mocks base method
func (m *MockSet) AddRecord(arg0 []entities.InfoElementWithValue, arg1 uint16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRecord", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRecord indicates an expected call of AddRecord
func (mr *MockSetMockRecorder) AddRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRecord", reflect.TypeOf((*MockSet)(nil).AddRecord), arg0, arg1)
}

// AddRecordWithExtraElements mocks base method
func (m *MockSet) AddRecordWithExtraElements(arg0 []entities.InfoElementWithValue, arg1 int, arg2 uint16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRecordWithExtraElements", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRecordWithExtraElements indicates an expected call of AddRecordWithExtraElements
func (mr *MockSetMockRecorder) AddRecordWithExtraElements(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRecordWithExtraElements", reflect.TypeOf((*MockSet)(nil).AddRecordWithExtraElements), arg0, arg1, arg2)
}

// GetHeaderBuffer mocks base method
func (m *MockSet) GetHeaderBuffer() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderBuffer")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetHeaderBuffer indicates an expected call of GetHeaderBuffer
func (mr *MockSetMockRecorder) GetHeaderBuffer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderBuffer", reflect.TypeOf((*MockSet)(nil).GetHeaderBuffer))
}

// GetNumberOfRecords mocks base method
func (m *MockSet) GetNumberOfRecords() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumberOfRecords")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetNumberOfRecords indicates an expected call of GetNumberOfRecords
func (mr *MockSetMockRecorder) GetNumberOfRecords() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumberOfRecords", reflect.TypeOf((*MockSet)(nil).GetNumberOfRecords))
}

// GetRecords mocks base method
func (m *MockSet) GetRecords() []entities.Record {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecords")
	ret0, _ := ret[0].([]entities.Record)
	return ret0
}

// GetRecords indicates an expected call of GetRecords
func (mr *MockSetMockRecorder) GetRecords() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecords", reflect.TypeOf((*MockSet)(nil).GetRecords))
}

// GetSetLength mocks base method
func (m *MockSet) GetSetLength() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSetLength")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetSetLength indicates an expected call of GetSetLength
func (mr *MockSetMockRecorder) GetSetLength() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSetLength", reflect.TypeOf((*MockSet)(nil).GetSetLength))
}

// GetSetType mocks base method
func (m *MockSet) GetSetType() entities.ContentType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSetType")
	ret0, _ := ret[0].(entities.ContentType)
	return ret0
}

// GetSetType indicates an expected call of GetSetType
func (mr *MockSetMockRecorder) GetSetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSetType", reflect.TypeOf((*MockSet)(nil).GetSetType))
}

// PrepareSet mocks base method
func (m *MockSet) PrepareSet(arg0 entities.ContentType, arg1 uint16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareSet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareSet indicates an expected call of PrepareSet
func (mr *MockSetMockRecorder) PrepareSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareSet", reflect.TypeOf((*MockSet)(nil).PrepareSet), arg0, arg1)
}

// ResetSet mocks base method
func (m *MockSet) ResetSet() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetSet")
}

// ResetSet indicates an expected call of ResetSet
func (mr *MockSetMockRecorder) ResetSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetSet", reflect.TypeOf((*MockSet)(nil).ResetSet))
}

// UpdateLenInHeader mocks base method
func (m *MockSet) UpdateLenInHeader() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateLenInHeader")
}

// UpdateLenInHeader indicates an expected call of UpdateLenInHeader
func (mr *MockSetMockRecorder) UpdateLenInHeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLenInHeader", reflect.TypeOf((*MockSet)(nil).UpdateLenInHeader))
}
